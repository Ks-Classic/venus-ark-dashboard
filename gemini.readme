# Gemini開発ガイドライン (Venus Ark Dashboard)

## 1. 基本原則

- **常にドキュメントを正とする**: 実装とドキュメント (`/docs/specifications/`配下) の間に乖離がある場合、常にドキュメントの記述を優先する。実装が先行している場合は、まずドキュメントを更新し、合意を得てから実装に着手する。
- **確認と合意の徹底**: 大規模な変更（UIの追加・削除、データ構造の変更など）を行う前には、必ず変更内容とその影響範囲を明確に提示し、ユーザーの承認を得る。曖昧な指示の場合は、具体的な選択肢を提示して意図を確認する。
- **段階的な実装**: 一度に複数の変更を行わず、機能単位・コンポーネント単位で段階的に実装と確認を繰り返す。

## 2. 開発フロー

1.  **【最重要】根本理解**: 表面的なコードを読むだけでなく、**なぜその実装になっているのか**という設計思想や背景を、関連ファイルを���底的に深掘りして必ず理解する。特に、データの流れ（生成、保存、取得、表示）は完全に追跡する。
2.  **要件の確認**: ユーザーからの指示を受けたら、まず関連する仕様書（SOW, 機能仕様書など）を再読し、要件を正確に理解する。
3.  **影響範囲の調査と全体最適の考察**:
    - 変更が及ぼす影響範囲を特定する。**UIの表示から、API、Firestoreのデータ構造、事前集計スクリプト、そして元となるNotionやスプレッドシートの構造まで、全てのレイヤーを遡って調査する。**
    - **関連機能との比較**: 類似機能（例: 採用DBと稼働状況DB）の実装を調査・比較し、「実装の統一性を保つべきか」「あえて違う仕様にすべきか」という全体最適の観点から考察する。
4.  **計画の提示**: 具体的な作業手順、変更内容、影響範囲��そして全体最適に関する考察を含んだ移行計画をユーザーに提示し、合意を得る。
5.  **実装**: 合意された計画に基づき、実装を行う。
6.  **ドキュメント更新**: 実装内容に合わせて、関連ドキュメントを更新する。
7.  **完了報告**: 実装とドキュメント更新が完了したことを報告し、確認を依頼する。

## 3. 削除操作における厳格なルール

- **削除判断の禁止**: 自己判断でファイルやディレクトリの削除を提案しない。
- **事前調査と報告の義務**: 削除を検討する前に、まずそのファイルやディレクトリがプロジェクトのどこから、どのように使用されているかを**全コード検索**によって徹底的に調査する。
- **影響の事前説明**: 調査結果に基づき、「このファイルを削除した場合、これらの機能に影響が出る」あるいは「調査の結果、どこからも使用されていないため安全に削除可能と判断できる」といった具体的な影響範囲を**必ずユーザーに説明し、明確な許可を得る。**

## 4. データベース関連の変更（特にID体系の変更）における特記事項
（省略）

## 5. 今回のインシデントからの教訓
（省略）
